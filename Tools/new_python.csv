Module,Function,Settings,Explanation
difflib,"get_close_matches(word, possibilities)","n=3, cutoff=0.6","Use SequenceMatcher to return list of the best ""good enough"" matches.

**word**
a sequence for which close matches are desired (typically a string).

**possibilities**
a list of sequences against which to match word (typically a list of strings).

**n**
default 3, optional
the maximum number of close matches to return. n must be > 0.

**cutoff**
default 0.6, optional
a float in [0, 1].
Possibilities that don't score at least that similar to word are ignored."
re,"match(pattern, string)",flags=0,"If zero or more characters at the beginning of string match the regular expression pattern, return a corresponding match object. Return None if the string does not match the pattern; note that this is different from a zero-length match.
Note that even in MULTILINE mode, re.match() will only match at the beginning of the string and not at the beginning of each line.
If you want to locate a match anywhere in string, use search() instead (see also search() vs. match())."
re,"fullmatch(pattern, string)",flags=0,"If the whole string matches the regular expression pattern, return a corresponding match object. Return None if the string does not match the pattern; note that this is different from a zero-length match."
re,"split(pattern, string)","maxsplit=0, flags=0","Split string by the occurrences of pattern.
If capturing parentheses are used in pattern, then the text of all groups in the pattern are also returned as part of the resulting list. If maxsplit is nonzero, at most maxsplit splits occur, and the remainder of the string is returned as the final element of the list."
re,"finditer(pattern, string)",flags=0,"Return an iterator yielding match objects over all non-overlapping matches for the RE pattern in string. The string is scanned left-to-right, and matches are returned in the order found. Empty matches are included in the result."
